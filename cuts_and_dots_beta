#include <bits/stdc++.h>

using namespace std;

bool compare(int a[], int b[], int arg_idx) {
    if (arg_idx == 0) {
        if (a[arg_idx] == b[arg_idx]) {
            if (a[arg_idx + 1] > b[arg_idx + 1]) return true;
            return false;
        }
        if (a[arg_idx] > b[arg_idx]) return true;
        return false;
    }
    if (a[arg_idx] >= b[arg_idx]) return true;
    return false;
}

void fill_arr(int arr[][4], int &length, int &line_count, int &dot_count) {
    cin >> line_count >> dot_count;
    length = dot_count + line_count * 2;
    for (int i = 0; i < line_count * 2; i+= 2) {
        cin >> arr[i][0];
        arr[i][2] = dot_count + 1;
        cin >> arr[i + 1][0];
        arr[i + 1][2] = dot_count + 1;
        if (arr[i][0] > arr[i + 1][0]) {
            arr[i + 1][1] = 1;
            arr[i][1] = -1;
        }
        else {
            arr[i + 1][1] = -1;
            arr[i][1] = 1;
        }
    }
    for (int i = 0; i < dot_count; i++) {
        cin >> arr[i + line_count * 2][0];
        arr[i + line_count * 2][1] = 0;
        arr[i + line_count * 2][2] = i;
    }
}

void place_3_elements(int arr[][4], int left, int right, int arg_idx) {
    if (compare(arr[left], arr[(left + right) / 2], arg_idx))
        swap(arr[left], arr[(left + right) / 2]);
    if (compare(arr[(left + right) / 2], arr[right], arg_idx))
        swap (arr[(left + right) / 2], arr[right]);
    if (compare(arr[left], arr[(left + right) / 2], arg_idx))
        swap(arr[left], arr[(left + right) / 2]);
}

void quicksort(int arr[][4], int left, int right, int arg_idx) {
    place_3_elements(arr, left, right, arg_idx);
    int i = left, j = right;
    while (i < j) {
        while(not(compare(arr[j], arr[(left + right) / 2], arg_idx))) i++;
        while(compare(arr[j], arr[(left + right) / 2], arg_idx)) j--;
        if (i <= j) {
            swap(arr[i], arr[j]);
            i++;
            j--;
        }
    }
    if (left < j) quicksort(arr, left, j, arg_idx);
    if (i < right) quicksort(arr, i, right, arg_idx);
}

void count_lines(int arr[][4], int length) {
    int counter = 0;
    for (int i = 0; i < length; i++) {
        if (arr[i][1] == 1) counter++;
        if (arr[i][1] == -1) counter--;
        else
            arr[i][3] = counter;
    }
}

void print_arr(int arr[][4], int length) {
    for (int i = 0; i < length; i++) {
        cout << arr[i][3] << " ";
    }
}

int main()
{
    ios_base::sync_with_stdio(0);
    cin.tie(0);
    cout.tie(0);
    int arr[30000][4], length, dot_count, line_count;
    fill_arr(arr, length, line_count, dot_count);
    quicksort(arr, 0, length - 1, 0);
    count_lines(arr, length);
    quicksort(arr, 0, length - 1, 2);
    print_arr(arr, dot_count);
}
